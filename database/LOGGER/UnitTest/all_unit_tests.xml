<?xml version = '1.0' encoding = 'UTF8'?>
<UT>
   <object class="oracle.dbtools.unit_test.testObjects.UtTest">
      <test id="6B25804AAFCB5826E0530100007F4059" name="Block recognition" obj_name="AOP_PROCESSOR" obj_owner="PACMAN" obj_type="FUNCTION" obj_call="WEAVE" src_conn_name="IdeConnections%23pacman" coverage="false">
         <arg id="6B25804AAFCC5826E0530100007F4059" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" position="0" sequence="1" data_level="0" data_type="PL/SQL BOOLEAN" in_out="OUT" pls_type="BOOLEAN" char_length="0" char_used="0"/>
         <arg id="6B25804AAFCD5826E0530100007F4059" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_CODE" position="1" sequence="2" data_level="0" data_type="CLOB" in_out="IN/OUT" character_set_name="CHAR_CS" pls_type="CLOB" char_length="0" char_used="0"/>
         <arg id="6B25804AAFCE5826E0530100007F4059" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_PACKAGE_NAME" position="2" sequence="3" data_level="0" data_type="VARCHAR2" in_out="IN" character_set_name="CHAR_CS" pls_type="VARCHAR2" char_used="B"/>
         <arg id="6B25804AAFCF5826E0530100007F4059" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_FOR_HTML" position="3" sequence="4" data_level="0" data_type="PL/SQL BOOLEAN" in_out="IN" pls_type="BOOLEAN" char_length="0" char_used="0"/>
         <arg id="6B25804AAFD05826E0530100007F4059" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_END_USER" position="4" sequence="5" data_level="0" data_type="VARCHAR2" in_out="IN" character_set_name="CHAR_CS" pls_type="VARCHAR2" char_used="B"/>
         <test_impl id="070a54f1-1ac9-49f0-a5d8-cdb86c335d0f" test_id="6B25804AAFCB5826E0530100007F4059" name="If then else" expected_ret="Success" expected_err="ANY">
            <parm argId="6B25804AAFCC5826E0530100007F4059" utiId="070a54f1-1ac9-49f0-a5d8-cdb86c335d0f" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFD05826E0530100007F4059" utiId="070a54f1-1ac9-49f0-a5d8-cdb86c335d0f" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCE5826E0530100007F4059" utiId="070a54f1-1ac9-49f0-a5d8-cdb86c335d0f" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCD5826E0530100007F4059" utiId="070a54f1-1ac9-49f0-a5d8-cdb86c335d0f" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;&#xA;  l_var  number;&#xA;  l_var2 number;&#xA;  l_var3 number;&#xA;&#xA;begin&#xA; &#xA;  FOR l_record IN (select 1 from dual) LOOP&#xA;    l_var := 1;&#xA;  END LOOP;&#xA;&#xA;  IF l_var = 0 then&#xA;    l_var := 1;&#xA;&#xA;  else&#xA;    IF l_var = 0 then  &#xA;      l_var := 1;&#xA;    elsif l_var = 0 then &#xA;      l_var := 1;&#xA;    end if;&#xA;    l_var := 1;&#xA;  end if;&#xA; &#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;&#xA;  l_var  number;&#xA;  l_var2 number;&#xA;  l_var3 number;&#xA;&#xA;begin&#xA; &#xA;  FOR l_record IN (select 1 from dual) LOOP&#xA;    l_var := 1;&#xA;    ms_logger.note(l_node,'l_var',l_var);&#xA;  END LOOP;&#xA;&#xA;  IF l_var = 0 then&#xA;    l_var := 1;&#xA;    ms_logger.note(l_node,'l_var',l_var);&#xA;&#xA;  else&#xA;    IF l_var = 0 then  &#xA;      l_var := 1;&#xA;      ms_logger.note(l_node,'l_var',l_var);&#xA;    elsif l_var = 0 then &#xA;      l_var := 1;&#xA;      ms_logger.note(l_node,'l_var',l_var);&#xA;    end if;&#xA;    l_var := 1;&#xA;    ms_logger.note(l_node,'l_var',l_var);&#xA;  end if;&#xA; &#xA;end;&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFCF5826E0530100007F4059" utiId="070a54f1-1ac9-49f0-a5d8-cdb86c335d0f" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_FOR_HTML&quot;/>" test_out_val="true"/>
         </test_impl>
         <test_impl id="6B25804AAFD15826E0530100007F4059" test_id="6B25804AAFCB5826E0530100007F4059" name="Nested Blocks" expected_ret="Success" expected_err="ANY">
            <parm argId="6B25804AAFCC5826E0530100007F4059" utiId="6B25804AAFD15826E0530100007F4059" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFD05826E0530100007F4059" utiId="6B25804AAFD15826E0530100007F4059" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCE5826E0530100007F4059" utiId="6B25804AAFD15826E0530100007F4059" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCD5826E0530100007F4059" utiId="6B25804AAFD15826E0530100007F4059" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;  l_name varchar2(10);&#xA;begin&#xA;&#xA;  declare&#xA;    l_name2 varchar2(10);&#xA;  begin&#xA;    l_name2 := 'Fred';&#xA;    l_name  := 'Jill';&#xA;  end;&#xA;&#xA;&#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;  l_name varchar2(10);&#xA;begin&#xA;&#xA;  declare&#xA;    l_name2 varchar2(10);&#xA;  begin&#xA;    l_name2 := 'Fred';&#xA;    ms_logger.note(l_node,'l_name2',l_name2);&#xA;    l_name  := 'Jill';&#xA;    ms_logger.note(l_node,'l_name',l_name);&#xA;  end;&#xA;&#xA;&#xA;end;&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFCF5826E0530100007F4059" utiId="6B25804AAFD15826E0530100007F4059" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_FOR_HTML&quot;>false&lt;/DataValue>" test_out_val="true"/>
         </test_impl>
         <test_impl id="cc1fa01a-a9aa-49c6-b795-7975e4bc9dc4" test_id="6B25804AAFCB5826E0530100007F4059" name="Package" expected_ret="Success" expected_err="ANY">
            <parm argId="6B25804AAFCC5826E0530100007F4059" utiId="cc1fa01a-a9aa-49c6-b795-7975e4bc9dc4" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFD05826E0530100007F4059" utiId="cc1fa01a-a9aa-49c6-b795-7975e4bc9dc4" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCE5826E0530100007F4059" utiId="cc1fa01a-a9aa-49c6-b795-7975e4bc9dc4" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCD5826E0530100007F4059" utiId="cc1fa01a-a9aa-49c6-b795-7975e4bc9dc4" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>create or replace package body my_pack as &#xA;&#xA;  procedure test is&#xA;  begin&#xA;    null;&#xA;  end;&#xA;&#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>create or replace package body my_pack as&#xA;   &#xA;&#xA;  procedure test is&#xA;    l_node ms_logger.node_typ := ms_logger.new_proc($$plsql_unit ,'test');&#xA;  begin --test&#xA;  begin&#xA;    null;&#xA;  end;&#xA;  exception&#xA;    when others then&#xA;      ms_logger.warn_error(l_node);&#xA;      raise;&#xA;  end; --test&#xA;&#xA;end;&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFCF5826E0530100007F4059" utiId="cc1fa01a-a9aa-49c6-b795-7975e4bc9dc4" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_FOR_HTML&quot;/>" test_out_val="true"/>
         </test_impl>
         <test_impl id="31e9c52f-37dc-427a-92b0-fef3a16bf3f9" test_id="6B25804AAFCB5826E0530100007F4059" name="Package with Init" expected_ret="Success" expected_err="ANY">
            <parm argId="6B25804AAFCC5826E0530100007F4059" utiId="31e9c52f-37dc-427a-92b0-fef3a16bf3f9" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFD05826E0530100007F4059" utiId="31e9c52f-37dc-427a-92b0-fef3a16bf3f9" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCE5826E0530100007F4059" utiId="31e9c52f-37dc-427a-92b0-fef3a16bf3f9" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCD5826E0530100007F4059" utiId="31e9c52f-37dc-427a-92b0-fef3a16bf3f9" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>create or replace package body my_pack as &#xA;&#xA;  procedure test is&#xA;  begin&#xA;    null;&#xA;  end;&#xA;begin &#xA;  null;&#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>create or replace package body my_pack as&#xA;  l_node ms_logger.node_typ := ms_logger.new_pkg($$plsql_unit ,'Initialise'); &#xA;&#xA;  procedure test is&#xA;    l_node ms_logger.node_typ := ms_logger.new_proc($$plsql_unit ,'test');&#xA;  begin --test&#xA;  begin&#xA;    null;&#xA;  end;&#xA;  exception&#xA;    when others then&#xA;      ms_logger.warn_error(l_node);&#xA;      raise;&#xA;  end; --test&#xA;begin --Initialise&#xA;begin &#xA;  null;&#xA;end;&#xA;exception&#xA;  when others then&#xA;    ms_logger.warn_error(l_node);&#xA;    raise;&#xA;end; --Initialise&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFCF5826E0530100007F4059" utiId="31e9c52f-37dc-427a-92b0-fef3a16bf3f9" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_FOR_HTML&quot;/>" test_out_val="true"/>
         </test_impl>
         <test_impl id="23f1bb34-833b-44f5-8b3f-10e55a9c1ee3" test_id="6B25804AAFCB5826E0530100007F4059" name="Program Units" expected_ret="Success" expected_err="ANY">
            <parm argId="6B25804AAFCC5826E0530100007F4059" utiId="23f1bb34-833b-44f5-8b3f-10e55a9c1ee3" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFD05826E0530100007F4059" utiId="23f1bb34-833b-44f5-8b3f-10e55a9c1ee3" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCE5826E0530100007F4059" utiId="23f1bb34-833b-44f5-8b3f-10e55a9c1ee3" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCD5826E0530100007F4059" utiId="23f1bb34-833b-44f5-8b3f-10e55a9c1ee3" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>procedure do_something(i_param1 in number) is&#xA;begin&#xA;  null;&#xA;end;&#xA; &#xA;procedure do_something_more(i_param2 in number)  is&#xA;begin&#xA;  null;&#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>procedure do_something(i_param1 in number) is&#xA;  l_node ms_logger.node_typ := ms_logger.new_proc($$plsql_unit ,'do_something');&#xA;begin --do_something&#xA;  ms_logger.param(l_node,'i_param1',i_param1);&#xA;begin&#xA;  null;&#xA;end;&#xA;exception&#xA;  when others then&#xA;    ms_logger.warn_error(l_node);&#xA;    raise;&#xA;end; --do_something&#xA; &#xA;procedure do_something_more(i_param2 in number)  is&#xA;  l_node ms_logger.node_typ := ms_logger.new_proc($$plsql_unit ,'do_something_more');&#xA;begin --do_something_more&#xA;  ms_logger.param(l_node,'i_param2',i_param2);&#xA;begin&#xA;  null;&#xA;end;&#xA;exception&#xA;  when others then&#xA;    ms_logger.warn_error(l_node);&#xA;    raise;&#xA;end; --do_something_more&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFCF5826E0530100007F4059" utiId="23f1bb34-833b-44f5-8b3f-10e55a9c1ee3" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_FOR_HTML&quot;/>" test_out_val="true"/>
         </test_impl>
         <test_impl id="4077a544-6878-4b2f-a173-8762978c45e7" test_id="6B25804AAFCB5826E0530100007F4059" name="Simple block" expected_ret="Success" expected_err="ANY">
            <parm argId="6B25804AAFCC5826E0530100007F4059" utiId="4077a544-6878-4b2f-a173-8762978c45e7" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFD05826E0530100007F4059" utiId="4077a544-6878-4b2f-a173-8762978c45e7" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCE5826E0530100007F4059" utiId="4077a544-6878-4b2f-a173-8762978c45e7" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
            <parm argId="6B25804AAFCD5826E0530100007F4059" utiId="4077a544-6878-4b2f-a173-8762978c45e7" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>BEGIN&#xA;  NULL;&#xA;END;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>BEGIN&#xA;  NULL;&#xA;END;&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B25804AAFCF5826E0530100007F4059" utiId="4077a544-6878-4b2f-a173-8762978c45e7" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_FOR_HTML&quot;/>" test_out_val="true"/>
         </test_impl>
      </test>
   </object>
   <object class="oracle.dbtools.unit_test.testObjects.UtTest">
      <test id="eec8ed21-c6ca-4d3d-ad34-585b35ee88b1" name="Comments" obj_name="AOP_PROCESSOR" obj_owner="PACMAN" obj_type="FUNCTION" obj_call="WEAVE" src_conn_name="IdeConnections%23pacman" coverage="false">
         <arg id="fcad8923-f9eb-4ed6-a42c-2ad40970258f" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" position="0" sequence="1" data_level="0" data_type="PL/SQL BOOLEAN" in_out="OUT" pls_type="BOOLEAN" char_length="0" char_used="0"/>
         <arg id="a32e14d3-4716-4603-8321-2b35d73556d6" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_CODE" position="1" sequence="2" data_level="0" data_type="CLOB" in_out="IN/OUT" character_set_name="CHAR_CS" pls_type="CLOB" char_length="0" char_used="0"/>
         <arg id="a20bd746-3309-44da-9e57-5b62029bdf70" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_PACKAGE_NAME" position="2" sequence="3" data_level="0" data_type="VARCHAR2" in_out="IN" character_set_name="CHAR_CS" pls_type="VARCHAR2" char_used="B"/>
         <arg id="e0aa6eea-5182-46fa-a6a9-2a948751fff9" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_FOR_HTML" position="3" sequence="4" data_level="0" data_type="PL/SQL BOOLEAN" in_out="IN" pls_type="BOOLEAN" char_length="0" char_used="0"/>
         <arg id="9a9ec6ea-db8a-4279-8867-5d6e26ed9b7f" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_END_USER" position="4" sequence="5" data_level="0" data_type="VARCHAR2" in_out="IN" character_set_name="CHAR_CS" pls_type="VARCHAR2" char_used="B"/>
         <test_impl id="fa3d6218-360b-471a-9451-983c7da08cbf" test_id="eec8ed21-c6ca-4d3d-ad34-585b35ee88b1" name="Special Comments" expected_ret="Success" expected_err="ANY">
            <parm argId="a32e14d3-4716-4603-8321-2b35d73556d6" utiId="fa3d6218-360b-471a-9451-983c7da08cbf" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;  l_name varchar2(10);&#xA;begin&#xA;&#xA;  l_name := q'[Special 'value']';&#xA;&#xA;  --Normal comment&#xA;  /*&#xA;  This is&#xA;  a multi-line comment&#xA;  --This is a single comment within an active multi-line comment close */&#xA;    --&quot;&quot;This is a special comment&#xA;    --??This is a special info&#xA;    --!!This is a special warning&#xA;    --##This is a special fatal&#xA;    --&quot;&quot;Next comment produces a Note.&#xA;    --^^l_name&#xA;  &#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;  l_name varchar2(10);&#xA;begin&#xA;&#xA;  l_name := q'[Special 'value']';&#xA;  ms_logger.note(l_node,'l_name',l_name);&#xA;&#xA;  --Normal comment&#xA;  /*&#xA;  This is&#xA;  a multi-line comment&#xA;  --This is a single comment within an active multi-line comment close */&#xA;    ms_logger.comment(l_node,'This is a special comment');&#xA;    ms_logger.info(l_node,'This is a special info');&#xA;    ms_logger.warning(l_node,'This is a special warning');&#xA;    ms_logger.fatal(l_node,'This is a special fatal');&#xA;    ms_logger.comment(l_node,'Next comment produces a Note.');&#xA;    ms_logger.note(l_node,'l_name',l_name);&#xA;  &#xA;end;&lt;/DataValue>" test_out_val="true"/>
            <parm argId="e0aa6eea-5182-46fa-a6a9-2a948751fff9" utiId="fa3d6218-360b-471a-9451-983c7da08cbf" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_FOR_HTML&quot;>false&lt;/DataValue>" test_out_val="true"/>
            <parm argId="9a9ec6ea-db8a-4279-8867-5d6e26ed9b7f" utiId="fa3d6218-360b-471a-9451-983c7da08cbf" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="a20bd746-3309-44da-9e57-5b62029bdf70" utiId="fa3d6218-360b-471a-9451-983c7da08cbf" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
            <parm argId="fcad8923-f9eb-4ed6-a42c-2ad40970258f" utiId="fa3d6218-360b-471a-9451-983c7da08cbf" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
         </test_impl>
      </test>
   </object>
   <object class="oracle.dbtools.unit_test.testObjects.UtTest">
      <test id="6B3A1F4AF18868FFE0530100007FB77E" name="Records" obj_name="AOP_PROCESSOR" obj_owner="PACMAN" obj_type="FUNCTION" obj_call="WEAVE" src_conn_name="IdeConnections%23pacman" coverage="false">
         <arg id="6B3A1F4AF18968FFE0530100007FB77E" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" position="0" sequence="1" data_level="0" data_type="PL/SQL BOOLEAN" in_out="OUT" pls_type="BOOLEAN" char_length="0" char_used="0"/>
         <arg id="6B3A1F4AF18A68FFE0530100007FB77E" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_CODE" position="1" sequence="2" data_level="0" data_type="CLOB" in_out="IN/OUT" character_set_name="CHAR_CS" pls_type="CLOB" char_length="0" char_used="0"/>
         <arg id="6B3A1F4AF18B68FFE0530100007FB77E" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_PACKAGE_NAME" position="2" sequence="3" data_level="0" data_type="VARCHAR2" in_out="IN" character_set_name="CHAR_CS" pls_type="VARCHAR2" char_used="B"/>
         <arg id="6B3A1F4AF18C68FFE0530100007FB77E" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_FOR_HTML" position="3" sequence="4" data_level="0" data_type="PL/SQL BOOLEAN" in_out="IN" pls_type="BOOLEAN" char_length="0" char_used="0"/>
         <arg id="6B3A1F4AF18D68FFE0530100007FB77E" owner="PACMAN" object_name="WEAVE" package_name="AOP_PROCESSOR" object_id="100689" argument_name="P_END_USER" position="4" sequence="5" data_level="0" data_type="VARCHAR2" in_out="IN" character_set_name="CHAR_CS" pls_type="VARCHAR2" char_used="B"/>
         <test_impl id="d43102cc-0bf2-411a-907b-d820954e9a62" test_id="6B3A1F4AF18868FFE0530100007FB77E" name="Def Var Pack Spec Rec Type" expected_ret="Success" expected_err="ANY">
            <parm argId="6B3A1F4AF18D68FFE0530100007FB77E" utiId="d43102cc-0bf2-411a-907b-d820954e9a62" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18968FFE0530100007FB77E" utiId="d43102cc-0bf2-411a-907b-d820954e9a62" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18A68FFE0530100007FB77E" utiId="d43102cc-0bf2-411a-907b-d820954e9a62" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;  l_test_var aop_test.test_typ;&#xA;begin&#xA;  l_test_var.num := 1;&#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>declare&#xA;  l_test_var aop_test.test_typ;&#xA;begin&#xA;  l_test_var.num := 1;&#xA;end;&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18C68FFE0530100007FB77E" utiId="d43102cc-0bf2-411a-907b-d820954e9a62" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_FOR_HTML&quot;/>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18B68FFE0530100007FB77E" utiId="d43102cc-0bf2-411a-907b-d820954e9a62" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
         </test_impl>
         <test_impl id="9600fc64-08b0-45c6-92c7-1589e81e9680" test_id="6B3A1F4AF18868FFE0530100007FB77E" name="PU Params Pack Spec Rec Type" expected_ret="Success" expected_err="ANY">
            <parm argId="6B3A1F4AF18D68FFE0530100007FB77E" utiId="9600fc64-08b0-45c6-92c7-1589e81e9680" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18968FFE0530100007FB77E" utiId="9600fc64-08b0-45c6-92c7-1589e81e9680" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18A68FFE0530100007FB77E" utiId="9600fc64-08b0-45c6-92c7-1589e81e9680" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>procedure test(i_var IN OUT ms_logger.NODE_TYP) is&#xA;begin&#xA;  i_var.logged := true;&#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>procedure test(i_var IN OUT ms_logger.NODE_TYP) is&#xA;  l_node ms_logger.node_typ := ms_logger.new_proc($$plsql_unit ,'test');&#xA;begin --test&#xA;  ms_logger.param(l_node,'i_var.open_process'    ,i_var.open_process);&#xA;  ms_logger.param(l_node,'i_var.node_level'      ,i_var.node_level);&#xA;  ms_logger.param(l_node,'i_var.logged'          ,i_var.logged);&#xA;  ms_logger.param(l_node,'i_var.internal_error'  ,i_var.internal_error);&#xA;  ms_logger.param(l_node,'i_var.call_stack_level',i_var.call_stack_level);&#xA;  ms_logger.param(l_node,'i_var.call_stack_hist' ,i_var.call_stack_hist);&#xA;begin&#xA;  i_var.logged := true;&#xA;  ms_logger.note(l_node,'i_var.logged',i_var.logged);&#xA;end;&#xA;exception&#xA;  when others then&#xA;    ms_logger.warn_error(l_node);&#xA;    raise;&#xA;end; --test&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18C68FFE0530100007FB77E" utiId="9600fc64-08b0-45c6-92c7-1589e81e9680" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_FOR_HTML&quot;/>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18B68FFE0530100007FB77E" utiId="9600fc64-08b0-45c6-92c7-1589e81e9680" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
         </test_impl>
         <test_impl id="6B3A1F4AF18E68FFE0530100007FB77E" test_id="6B3A1F4AF18868FFE0530100007FB77E" name="Param Rowtypes" expected_ret="Success" expected_err="ANY">
            <parm argId="6B3A1F4AF18D68FFE0530100007FB77E" utiId="6B3A1F4AF18E68FFE0530100007FB77E" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_END_USER&quot;/>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18968FFE0530100007FB77E" utiId="6B3A1F4AF18E68FFE0530100007FB77E" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue>true&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18A68FFE0530100007FB77E" utiId="6B3A1F4AF18E68FFE0530100007FB77E" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>function test(i_module ms_module%ROWTYPE) is &#xA;begin&#xA;  null;&#xA;end;&lt;/DataValue>" output_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_CODE&quot;>function test(i_module ms_module%ROWTYPE) is&#xA;  l_node ms_logger.node_typ := ms_logger.new_func($$plsql_unit ,'test'); &#xA;begin --test&#xA;  ms_logger.param(l_node,'i_module.owner'       ,i_module.owner);&#xA;  ms_logger.param(l_node,'i_module.open_process',i_module.open_process);&#xA;  ms_logger.param(l_node,'i_module.msg_mode'    ,i_module.msg_mode);&#xA;  ms_logger.param(l_node,'i_module.module_type' ,i_module.module_type);&#xA;  ms_logger.param(l_node,'i_module.revision'    ,i_module.revision);&#xA;  ms_logger.param(l_node,'i_module.module_name' ,i_module.module_name);&#xA;  ms_logger.param(l_node,'i_module.module_id'   ,i_module.module_id);&#xA;begin&#xA;  null;&#xA;end;&#xA;exception&#xA;  when others then&#xA;    ms_logger.warn_error(l_node);&#xA;    raise;&#xA;end; --test&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18C68FFE0530100007FB77E" utiId="6B3A1F4AF18E68FFE0530100007FB77E" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue name=&quot;P_FOR_HTML&quot;>false&lt;/DataValue>" test_out_val="true"/>
            <parm argId="6B3A1F4AF18B68FFE0530100007FB77E" utiId="6B3A1F4AF18E68FFE0530100007FB77E" input_value="&lt;?xml version = '1.0' encoding = 'UTF-8'?>&#xA;&lt;DataValue is_null=&quot;true&quot; name=&quot;P_PACKAGE_NAME&quot;/>" test_out_val="true"/>
         </test_impl>
      </test>
   </object>
   <object class="oracle.dbtools.unit_test.testObjects.UtSuite">
      <suite id="b215fe08-7971-49fc-94a2-413e51f972c8" name="AOP_PROCESSOR.WEAVE Plain" coverage="false" source_conn_name="">
         <suite_item test_id="6B25804AAFCB5826E0530100007F4059" run_start="true" run_teardown="true"/>
         <suite_item test_id="eec8ed21-c6ca-4d3d-ad34-585b35ee88b1" run_start="true" run_teardown="true"/>
         <suite_item test_id="6B3A1F4AF18868FFE0530100007FB77E" run_start="true" run_teardown="true"/>
      </suite>
   </object>
</UT>